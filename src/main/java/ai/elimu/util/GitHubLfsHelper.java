package ai.elimu.util;

import java.util.Base64;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import ai.elimu.entity.content.multimedia.Image;
import ai.elimu.entity.content.multimedia.Video;
import ai.elimu.web.context.EnvironmentContextLoaderListener;
import kong.unirest.core.HttpResponse;
import kong.unirest.core.Unirest;
import lombok.extern.slf4j.Slf4j;

/**
 * Utility class for uploading files to the Large File Storage (LFS) 
 * repo: https://github.com/elimu-ai/webapp-lfs
 */
@Slf4j
public class GitHubLfsHelper {

    private static final String API_BASE_URL = "https://api.github.com/repos/elimu-ai/webapp-lfs/contents/";

    /**
     * Upload image to LFS.
     * 
     * @param image The Image representing the file bytes.
     * @param bytes The file bytes to be stored.
     * @return The checksum (SHA) generated by GitHub.
     */
    public static String uploadImageToLfs(Image image, byte[] bytes) {
        log.info("uploadImageToLfs");

        String languageCode = EnvironmentContextLoaderListener.PROPERTIES.getProperty("content.language");
        log.info("languageCode: " + languageCode);
        
        String filename = image.getChecksumMd5() + "." + image.getImageFormat().toString().toLowerCase();
        log.info("filename: " + filename);

        String path = "lang-" + languageCode + "/images/" + filename;
        log.info("path: " + path);
        
        return uploadFileToLfs(path, bytes);
    }

    /**
     * Upload video to LFS.
     * 
     * @param video The Video representing the file bytes.
     * @param bytes The file bytes to be stored.
     * @return The checksum (SHA) generated by GitHub.
     */
    public static String uploadVideoToLfs(Video video, byte[] bytes) {
        log.info("uploadVideoToLfs");

        String languageCode = EnvironmentContextLoaderListener.PROPERTIES.getProperty("content.language");
        log.info("languageCode: " + languageCode);
        
        String filename = video.getChecksumMd5() + "." + video.getVideoFormat().toString().toLowerCase();
        log.info("filename: " + filename);

        String path = "lang-" + languageCode + "/videos/" + filename;
        log.info("path: " + path);
        
        return uploadFileToLfs(path, bytes);
    }

    /**
     * Store file in webapp-lfs
     * https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#create-or-update-file-contents
     */
    private static String uploadFileToLfs(String path, byte[] bytes) {
        log.info("uploadFileToLfs");

        String url = API_BASE_URL + path;
        log.info("url: " + url);

        JsonObject body = new JsonObject();
        body.addProperty("message", "chore: add " + path );
        body.addProperty("content", Base64.getEncoder().encodeToString(bytes));
        
        JsonObject committer = new JsonObject();
        committer.addProperty("name", "Nya Îžlimu");
        committer.addProperty("email", "info@elimu.ai");
        body.add("committer", committer);
        log.debug("body: " + body);

        String accessToken = ConfigHelper.getProperty("github.lfs.token");
        HttpResponse<String> httpResponse = Unirest.put(url)
            .header("Authorization", "Bearer " + accessToken)
            .body(body.toString())
            .asString();
        log.info("httpResponse: " + httpResponse);
        log.info("httpResponse.getStatus(): " + httpResponse.getStatus());
        log.info("httpResponse.isSuccess(): " + httpResponse.isSuccess());
        
        JsonObject responseAsJson = JsonParser.parseString(httpResponse.getBody()).getAsJsonObject();
        log.info("responseAsJson.keySet(): " + responseAsJson.keySet());
        if (!httpResponse.isSuccess()) {
            log.warn("responseAsJson: " + responseAsJson);
            return null;
        } else {
            JsonElement contentElement = responseAsJson.get("content");
            log.info("contentElement: " + contentElement);
            String sha = contentElement.getAsJsonObject().get("sha").getAsString();
            log.info("sha: " + sha);
            return sha;
        }
    }
}
