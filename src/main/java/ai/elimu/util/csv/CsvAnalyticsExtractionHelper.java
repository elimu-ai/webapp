package ai.elimu.util.csv;

import ai.elimu.entity.analytics.LetterSoundAssessmentEvent;
import ai.elimu.entity.analytics.LetterSoundLearningEvent;
import ai.elimu.entity.analytics.NumberAssessmentEvent;
import ai.elimu.entity.analytics.NumberLearningEvent;
import ai.elimu.entity.analytics.StoryBookLearningEvent;
import ai.elimu.entity.analytics.VideoLearningEvent;
import ai.elimu.entity.analytics.WordAssessmentEvent;
import ai.elimu.entity.analytics.WordLearningEvent;
import ai.elimu.model.v2.enums.analytics.LearningEventType;
import ai.elimu.model.v2.enums.analytics.research.ExperimentGroup;
import ai.elimu.model.v2.enums.analytics.research.ResearchExperiment;
import ai.elimu.util.AnalyticsHelper;
import lombok.extern.slf4j.Slf4j;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.lang.StringUtils;

/**
 * Helper class for processing CSV files that were originally generated by the Analytics Android app: 
 * https://github.com/elimu-ai/analytics/blob/main/app/src/main/java/ai/elimu/analytics/task/ExportEventsToCsvWorker.kt
 */
@Slf4j
public class CsvAnalyticsExtractionHelper {

    public static List<LetterSoundAssessmentEvent> extractLetterSoundAssessmentEvents(File csvFile) {
        log.info("extractLetterSoundAssessmentEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<LetterSoundAssessmentEvent> letterSoundAssessmentEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                LetterSoundAssessmentEvent letterSoundAssessmentEvent = new LetterSoundAssessmentEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("timestamp"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                letterSoundAssessmentEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                letterSoundAssessmentEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                letterSoundAssessmentEvent.setPackageName(packageName);

                Float masteryScore = Float.valueOf(csvRecord.get("mastery_score"));
                letterSoundAssessmentEvent.setMasteryScore(masteryScore);

                Long timeSpentMs = Long.valueOf(csvRecord.get("time_spent_ms"));
                letterSoundAssessmentEvent.setTimeSpentMs(timeSpentMs);

                String additionalData = csvRecord.get("additional_data");
                if (StringUtils.isNotBlank(additionalData)) {
                    letterSoundAssessmentEvent.setAdditionalData(additionalData);
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        letterSoundAssessmentEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        letterSoundAssessmentEvent.setExperimentGroup(experimentGroup);
                    }
                }

                String letterSoundLetters = csvRecord.get("letter_sound_letters");
                letterSoundAssessmentEvent.setLetterSoundLetters(letterSoundLetters);

                String letterSoundSounds = csvRecord.get("letter_sound_sounds");
                letterSoundAssessmentEvent.setLetterSoundLetters(letterSoundSounds);

                Long letterSoundId = Long.valueOf(csvRecord.get("letter_sound_id"));
                letterSoundAssessmentEvent.setLetterSoundId(letterSoundId);

                letterSoundAssessmentEvents.add(letterSoundAssessmentEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return letterSoundAssessmentEvents;
    }
    
    public static List<LetterSoundLearningEvent> extractLetterSoundLearningEvents(File csvFile) {
        log.info("extractLetterSoundLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<LetterSoundLearningEvent> letterSoundLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                LetterSoundLearningEvent letterSoundLearningEvent = new LetterSoundLearningEvent();
                
                String timestampColumnName = null;
                if (versionCode < 3004000) {
                    timestampColumnName = "time";
                } else {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.4.0
                    timestampColumnName = "timestamp";
                }
                long timestampInMillis = Long.valueOf(csvRecord.get(timestampColumnName).substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                letterSoundLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                letterSoundLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                letterSoundLearningEvent.setPackageName(packageName);

                if (versionCode >= 3006000) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.6.0
                    String additionalData = csvRecord.get("additional_data");
                    if (StringUtils.isNotBlank(additionalData)) {
                        letterSoundLearningEvent.setAdditionalData(additionalData);
                    }
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9

                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        letterSoundLearningEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        letterSoundLearningEvent.setExperimentGroup(experimentGroup);
                    }
                }

                // TODO: letterSoundLetters

                // TODO: letterSoundSounds

                Long letterSoundId = Long.valueOf(csvRecord.get("letter_sound_id"));
                letterSoundLearningEvent.setLetterSoundId(letterSoundId);

                letterSoundLearningEvents.add(letterSoundLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return letterSoundLearningEvents;
    }

    
    public static List<NumberAssessmentEvent> extractNumberAssessmentEvents(File csvFile) {
        log.info("extractNumberAssessmentEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<NumberAssessmentEvent> numberAssessmentEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                NumberAssessmentEvent numberAssessmentEvent = new NumberAssessmentEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("timestamp").substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                numberAssessmentEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                numberAssessmentEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                numberAssessmentEvent.setPackageName(packageName);

                Float masteryScore = Float.valueOf(csvRecord.get("mastery_score"));
                numberAssessmentEvent.setMasteryScore(masteryScore);

                Long timeSpentMs = Long.valueOf(csvRecord.get("time_spent_ms"));
                numberAssessmentEvent.setTimeSpentMs(timeSpentMs);

                String additionalData = csvRecord.get("additional_data");
                if (StringUtils.isNotBlank(additionalData)) {
                    numberAssessmentEvent.setAdditionalData(additionalData);
                }

                int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                numberAssessmentEvent.setResearchExperiment(researchExperiment);

                int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                numberAssessmentEvent.setExperimentGroup(experimentGroup);

                Integer numberValue = Integer.valueOf(csvRecord.get("number_value"));
                numberAssessmentEvent.setNumberValue(numberValue);

                // String numberSymbol = csvRecord.get("number_symbol");
                // numberAssessmentEvent.setNumberSymbol(numberSymbol);

                if (StringUtils.isNotBlank(csvRecord.get("number_id"))) {
                    Long numberId = Long.valueOf(csvRecord.get("number_id"));
                    numberAssessmentEvent.setNumberId(numberId);
                }

                numberAssessmentEvents.add(numberAssessmentEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return numberAssessmentEvents;
    }

    public static List<NumberLearningEvent> extractNumberLearningEvents(File csvFile) {
        log.info("extractNumberLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<NumberLearningEvent> numberLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                NumberLearningEvent numberLearningEvent = new NumberLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("timestamp").substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                numberLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                numberLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                numberLearningEvent.setPackageName(packageName);

                String additionalData = csvRecord.get("additional_data");
                if (StringUtils.isNotBlank(additionalData)) {
                    numberLearningEvent.setAdditionalData(additionalData);
                }

                if (StringUtils.isNotBlank(csvRecord.get("learning_event_type"))) {
                    LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                    numberLearningEvent.setLearningEventType(learningEventType);
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        numberLearningEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        numberLearningEvent.setExperimentGroup(experimentGroup);
                    }
                }

                Integer numberValue = Integer.valueOf(csvRecord.get("number_value"));
                numberLearningEvent.setNumberValue(numberValue);

                String numberSymbol = csvRecord.get("number_symbol");
                numberLearningEvent.setNumberSymbol(numberSymbol);

                Long numberId = Long.valueOf(csvRecord.get("number_id"));
                numberLearningEvent.setNumberId(numberId);

                numberLearningEvents.add(numberLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return numberLearningEvents;
    }

    
    public static List<WordAssessmentEvent> extractWordAssessmentEvents(File csvFile) {
        log.info("extractWordAssessmentEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<WordAssessmentEvent> wordAssessmentEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                WordAssessmentEvent wordAssessmentEvent = new WordAssessmentEvent();
                
                String timestampColumnName = null;
                if (versionCode < 3004000) {
                    timestampColumnName = "time";
                } else {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.4.0
                    timestampColumnName = "timestamp";
                }
                long timestampInMillis = Long.valueOf(csvRecord.get(timestampColumnName).substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                wordAssessmentEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                wordAssessmentEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                wordAssessmentEvent.setPackageName(packageName);

                Float masteryScore = Float.valueOf(csvRecord.get("mastery_score"));
                wordAssessmentEvent.setMasteryScore(masteryScore);

                Long timeSpentMs = Long.valueOf(csvRecord.get("time_spent_ms"));
                wordAssessmentEvent.setTimeSpentMs(timeSpentMs);

                if (versionCode >= 3006000) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.6.0
                    String additionalData = csvRecord.get("additional_data");
                    if (StringUtils.isNotBlank(additionalData)) {
                        wordAssessmentEvent.setAdditionalData(additionalData);
                    }
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        wordAssessmentEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        wordAssessmentEvent.setExperimentGroup(experimentGroup);
                    }
                }

                String wordText = csvRecord.get("word_text");
                wordAssessmentEvent.setWordText(wordText);

                Long wordId = Long.valueOf(csvRecord.get("word_id"));
                wordAssessmentEvent.setWordId(wordId);

                wordAssessmentEvents.add(wordAssessmentEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return wordAssessmentEvents;
    }
    
    public static List<WordLearningEvent> extractWordLearningEvents(File csvFile) {
        log.info("extractWordLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<WordLearningEvent> wordLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                WordLearningEvent wordLearningEvent = new WordLearningEvent();
                
                String timestampColumnName = null;
                if (versionCode < 3004000) {
                    timestampColumnName = "time";
                } else {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.4.0
                    timestampColumnName = "timestamp";
                }
                long timestampInMillis = Long.valueOf(csvRecord.get(timestampColumnName).substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                wordLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                wordLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                wordLearningEvent.setPackageName(packageName);

                if (StringUtils.isNotBlank(csvRecord.get("learning_event_type"))) {
                    LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                    wordLearningEvent.setLearningEventType(learningEventType);
                }

                if (versionCode >= 3006000) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.6.0
                    String additionalData = csvRecord.get("additional_data");
                    if (StringUtils.isNotBlank(additionalData)) {
                        wordLearningEvent.setAdditionalData(additionalData);
                    }
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        wordLearningEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        wordLearningEvent.setExperimentGroup(experimentGroup);
                    }
                }

                String wordText = csvRecord.get("word_text");
                wordLearningEvent.setWordText(wordText);

                Long wordId = Long.valueOf(csvRecord.get("word_id"));
                wordLearningEvent.setWordId(wordId);

                wordLearningEvents.add(wordLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return wordLearningEvents;
    }

    
    public static List<StoryBookLearningEvent> extractStoryBookLearningEvents(File csvFile) {
        log.info("extractStoryBookLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<StoryBookLearningEvent> storyBookLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                StoryBookLearningEvent storyBookLearningEvent = new StoryBookLearningEvent();
                
                String timestampColumnName = null;
                if (versionCode < 3004000) {
                    timestampColumnName = "time";
                } else {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.4.0
                    timestampColumnName = "timestamp";
                }
                long timestampInMillis = Long.valueOf(csvRecord.get(timestampColumnName).substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                storyBookLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                storyBookLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                storyBookLearningEvent.setPackageName(packageName);

                if (StringUtils.isNotBlank(csvRecord.get("learning_event_type"))) {
                    LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                    storyBookLearningEvent.setLearningEventType(learningEventType);
                }

                if (versionCode >= 3006000) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.6.0
                    String additionalData = csvRecord.get("additional_data");
                    if (StringUtils.isNotBlank(additionalData)) {
                        storyBookLearningEvent.setAdditionalData(additionalData);
                    }
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        storyBookLearningEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        storyBookLearningEvent.setExperimentGroup(experimentGroup);
                    }
                }

                if (versionCode < 3003000) {
                    storyBookLearningEvent.setStoryBookTitle("");
                } else {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.3.0
                    String storyBookTitle = csvRecord.get("storybook_title");
                    storyBookLearningEvent.setStoryBookTitle(storyBookTitle);
                }

                Long storyBookId = Long.valueOf(csvRecord.get("storybook_id"));
                storyBookLearningEvent.setStoryBookId(storyBookId);

                storyBookLearningEvents.add(storyBookLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return storyBookLearningEvents;
    }

    
    public static List<VideoLearningEvent> extractVideoLearningEvents(File csvFile) {
        log.info("extractVideoLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<VideoLearningEvent> videoLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                VideoLearningEvent videoLearningEvent = new VideoLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("timestamp").substring(0, 10)) * 1_000;
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                videoLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                videoLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                videoLearningEvent.setPackageName(packageName);

                if (StringUtils.isNotBlank(csvRecord.get("learning_event_type"))) {
                    LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                    videoLearningEvent.setLearningEventType(learningEventType);
                }

                String additionalData = csvRecord.get("additional_data");
                if (StringUtils.isNotBlank(additionalData)) {
                    videoLearningEvent.setAdditionalData(additionalData);
                }

                if (versionCode >= 3005009) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.5.9
                    
                    if (StringUtils.isNotBlank(csvRecord.get("research_experiment"))) {
                        int researchExperimentOrdinal = Integer.valueOf(csvRecord.get("research_experiment"));
                        ResearchExperiment researchExperiment = ResearchExperiment.values()[researchExperimentOrdinal];
                        videoLearningEvent.setResearchExperiment(researchExperiment);
                    }

                    if (StringUtils.isNotBlank(csvRecord.get("experiment_group"))) {
                        int experimentGroupOrdinal = Integer.valueOf(csvRecord.get("experiment_group"));
                        ExperimentGroup experimentGroup = ExperimentGroup.values()[experimentGroupOrdinal];
                        videoLearningEvent.setExperimentGroup(experimentGroup);
                    }
                }

                String videoTitle = csvRecord.get("video_title");
                videoLearningEvent.setVideoTitle(videoTitle);

                Long videoId = Long.valueOf(csvRecord.get("video_id"));
                videoLearningEvent.setVideoId(videoId);

                videoLearningEvents.add(videoLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return videoLearningEvents;
    }
}
