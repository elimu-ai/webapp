package ai.elimu.util.csv;

import ai.elimu.entity.analytics.LetterSoundLearningEvent;
import ai.elimu.entity.analytics.StoryBookLearningEvent;
import ai.elimu.entity.analytics.VideoLearningEvent;
import ai.elimu.entity.analytics.WordAssessmentEvent;
import ai.elimu.entity.analytics.WordLearningEvent;
import ai.elimu.model.v2.enums.analytics.LearningEventType;
import ai.elimu.util.AnalyticsHelper;
import lombok.extern.slf4j.Slf4j;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

/**
 * Helper class for processing CSV files that were originally generated by the Analytics Android app: 
 * https://github.com/elimu-ai/analytics/blob/main/app/src/main/java/ai/elimu/analytics/task/ExportEventsToCsvWorker.kt
 */
@Slf4j
public class CsvAnalyticsExtractionHelper {

    public static List<LetterSoundLearningEvent> extractLetterSoundLearningEvents(File csvFile) {
        log.info("extractLetterSoundLearningEvents");

        List<LetterSoundLearningEvent> letterSoundLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                LetterSoundLearningEvent letterSoundLearningEvent = new LetterSoundLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("time"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                letterSoundLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                letterSoundLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                letterSoundLearningEvent.setPackageName(packageName);

                Long letterSoundId = Long.valueOf(csvRecord.get("letter_sound_id"));
                letterSoundLearningEvent.setLetterSoundId(letterSoundId);

                letterSoundLearningEvents.add(letterSoundLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return letterSoundLearningEvents;
    }

    public static List<WordAssessmentEvent> extractWordAssessmentEvents(File csvFile) {
        log.info("extractWordAssessmentEvents");

        List<WordAssessmentEvent> wordAssessmentEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                WordAssessmentEvent wordAssessmentEvent = new WordAssessmentEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("time"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                wordAssessmentEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                wordAssessmentEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                wordAssessmentEvent.setPackageName(packageName);

                String wordText = csvRecord.get("word_text");
                wordAssessmentEvent.setWordText(wordText);

                Long wordId = Long.valueOf(csvRecord.get("word_id"));
                wordAssessmentEvent.setWordId(wordId);

                Float masteryScore = Float.valueOf(csvRecord.get("mastery_score"));
                wordAssessmentEvent.setMasteryScore(masteryScore);

                Long timeSpentMs = Long.valueOf(csvRecord.get("time_spent_ms"));
                wordAssessmentEvent.setTimeSpentMs(timeSpentMs);

                // String additionalData = csvRecord.get("additional_data");
                // wordAssessmentEvent.setAdditionalData(additionalData);

                wordAssessmentEvents.add(wordAssessmentEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return wordAssessmentEvents;
    }
    
    public static List<WordLearningEvent> extractWordLearningEvents(File csvFile) {
        log.info("extractWordLearningEvents");

        List<WordLearningEvent> wordLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                WordLearningEvent wordLearningEvent = new WordLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("time"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                wordLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                wordLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                wordLearningEvent.setPackageName(packageName);

                Long wordId = Long.valueOf(csvRecord.get("word_id"));
                // wordLearningEvent.setWordId(wordId);

                String wordText = csvRecord.get("word_text");
                wordLearningEvent.setWordText(wordText);

                LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                wordLearningEvent.setLearningEventType(learningEventType);

                // String additionalData = csvRecord.get("additional_data");
                // wordLearningEvent.setAdditionalData(additionalData);

                wordLearningEvents.add(wordLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return wordLearningEvents;
    }

    public static List<StoryBookLearningEvent> extractStoryBookLearningEvents(File csvFile) {
        log.info("extractStoryBookLearningEvents");

        Integer versionCode = AnalyticsHelper.extractVersionCodeFromCsvFilename(csvFile.getName());
        log.info("versionCode: " + versionCode);

        List<StoryBookLearningEvent> storyBookLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                StoryBookLearningEvent storyBookLearningEvent = new StoryBookLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("time"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                storyBookLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                storyBookLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                storyBookLearningEvent.setPackageName(packageName);

                if (versionCode >= 3003000) {
                    // https://github.com/elimu-ai/analytics/releases/tag/3.3.0
                    String storyBookTitle = csvRecord.get("storybook_title");
                    storyBookLearningEvent.setStoryBookTitle(storyBookTitle);
                } else {
                    storyBookLearningEvent.setStoryBookTitle("");
                }

                Long storyBookId = Long.valueOf(csvRecord.get("storybook_id"));
                storyBookLearningEvent.setStoryBookId(storyBookId);

                LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                storyBookLearningEvent.setLearningEventType(learningEventType);

                // String additionalData = csvRecord.get("additional_data");
                // storyBookLearningEvent.setAdditionalData(additionalData);

                storyBookLearningEvents.add(storyBookLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return storyBookLearningEvents;
    }

    public static List<VideoLearningEvent> extractVideoLearningEvents(File csvFile) {
        log.info("extractVideoLearningEvents");

        List<VideoLearningEvent> videoLearningEvents = new ArrayList<>();

        // Iterate each row in the CSV file
        Path csvFilePath = Paths.get(csvFile.toURI());
        log.info("csvFilePath: " + csvFilePath);
        try {
            Reader reader = Files.newBufferedReader(csvFilePath);
            CSVFormat csvFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader();
            log.info("header: " + Arrays.toString(csvFormat.getHeader()));
            CSVParser csvParser = new CSVParser(reader, csvFormat);
            for (CSVRecord csvRecord : csvParser) {
                log.info("csvRecord: " + csvRecord);
                
                // Convert from CSV to Java

                VideoLearningEvent videoLearningEvent = new VideoLearningEvent();
                
                long timestampInMillis = Long.valueOf(csvRecord.get("timestamp"));
                Calendar timestamp = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
                timestamp.setTimeInMillis(timestampInMillis);
                videoLearningEvent.setTimestamp(timestamp);
                
                String androidId = AnalyticsHelper.extractAndroidIdFromCsvFilename(csvFile.getName());
                videoLearningEvent.setAndroidId(androidId);
                
                String packageName = csvRecord.get("package_name");
                videoLearningEvent.setPackageName(packageName);

                Long videoId = Long.valueOf(csvRecord.get("video_id"));
                videoLearningEvent.setVideoId(videoId);

                String videoTitle = csvRecord.get("video_title");
                videoLearningEvent.setVideoTitle(videoTitle);

                LearningEventType learningEventType = LearningEventType.valueOf(csvRecord.get("learning_event_type"));
                videoLearningEvent.setLearningEventType(learningEventType);

                String additionalData = csvRecord.get("additional_data");
                videoLearningEvent.setAdditionalData(additionalData);

                videoLearningEvents.add(videoLearningEvent);
            }
            csvParser.close();
        } catch (IOException ex) {
            log.error(ex.getMessage());
        }

        return videoLearningEvents;
    }
}
